(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{409:function(a,t,s){"use strict";s.r(t);var e=s(56),r=Object(e.a)({},(function(){var a=this,t=a.$createElement,s=a._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h2",{attrs:{id:"特殊字符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#特殊字符"}},[a._v("#")]),a._v(" 特殊字符")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('\\进行转义\n\t在字符串中我们可以使用\\作为转义字符，str = "我说:\\"今天\\t天气真不错！\\"";\n\\n 表示换行\n\\t 制表符\n\\\\ 表示\\    #只想输出一个\'\\\'，同样的如果向输出3个斜杠，就需要str = "\\\\\\\\\\\\";\n')])])]),s("h2",{attrs:{id:"强制类型转换"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#强制类型转换"}},[a._v("#")]),a._v(" 强制类型转换")]),a._v(" "),s("blockquote",[s("p",[a._v("#将其他的数据类型转换为String")])]),a._v(" "),s("ul",[s("li",[s("p",[a._v("方式一：调用被转换数据类型的toString()方法")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("var a = 123 ;       \ta.toString()    #字符串转换，方法不会影响到原变量，它会将转换的结果返回\nvar a = true ;       \ta.toString()\nvar a = null ;       \ta.toString()    #报错a没有toString属性（property）！！！！\nvar a = undefined ;     a.toString()    #报错同上\n")])])])]),a._v(" "),s("li",[s("p",[a._v("方式二：调用String()函数，并将被转换的数据作为参数传递给函数")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('var a = 123 ;       string(a)\nvar a = null ;      string(a)    \t\t\t#没有报错，a变成了"null"\nvar a = undefined ;       string(a)    \t\t#没有报错，a变成了"undefined"\n\n#使用String()函数做强制类型转换时，对于Number和Boolean实际上就是调用的toString()方法，但是对于null和undefined，就不会调用toString()方法\n\t它会将 null 直接转换为 "null"\n\t将 undefined 直接转换为 "undefined"\n')])])])])]),a._v(" "),s("h2",{attrs:{id:"length属性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#length属性"}},[a._v("#")]),a._v(" length属性")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("#可以用来获取字符串的长度\n\n'aaa'.length\n")])])]),s("h2",{attrs:{id:"charat"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#charat"}},[a._v("#")]),a._v(" charAt")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("#可以返回字符串中指定位置的字符\n\nstr.charAt(6);\n")])])]),s("h2",{attrs:{id:"charcodeat"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#charcodeat"}},[a._v("#")]),a._v(" charCodeAt")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("#获取指定位置字符的字符编码（Unicode编码）\n\n'abcdefg'.charCodeAt(0)\t\t\t#97\n'Abcdefg'.charCodeAt(0)\t\t\t#65\n")])])]),s("h2",{attrs:{id:"string-fromcharcode"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#string-fromcharcode"}},[a._v("#")]),a._v(" String.fromCharCode")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("#可以根据字符编码去获取字符            #这个是通过构造函数调用的\n\nString.fromCharCode(65);\t\t\t\t#'A'\nString.fromCharCode(20013);\t\t\t\t#这个是十进制;    '中'\nString.fromCharCode(0x2692);\t\t\t#这个是十六进制;\t'⚒'\n")])])]),s("h2",{attrs:{id:"concat"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#concat"}},[a._v("#")]),a._v(" concat")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("#可以用来连接两个或多个字符串，作用和+一样\n\n'abc'.concat(\"你好\",\"再见\");\t\t\t#'abc你好再见'\n")])])]),s("h2",{attrs:{id:"indexof"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#indexof"}},[a._v("#")]),a._v(" indexof")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('#该方法可以检索一个字符串中是否含有指定内容\n- 如果字符串中含有该内容，则会返回其第一次出现的索引,如果没有找到指定的内容，则返回-1\n- 可以指定一个第二个参数，指定开始查找的位置\n\nstr.indexOf("h");\nstr.indexOf("h",1);\n')])])]),s("h2",{attrs:{id:"lastindexof"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#lastindexof"}},[a._v("#")]),a._v(" lastIndexOf")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("#该方法的用法和indexOf()一样，不同的是indexOf是从前往后找，而lastIndexOf是从后往前找,也可以指定开始查找的位置\n\n\n\n")])])]),s("h2",{attrs:{id:"slice"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#slice"}},[a._v("#")]),a._v(" slice")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("#切片,可以从字符串中截取指定的内容,不会影响原字符串，而是将截取到内容返回\n- 参数：第一个是开始位置的索引（包括开始位置） 第二个是结束位置的索引（不包括结束位置,如果省略第二个参数，则会截取到后边所有的）\n\t#也可以传递一个负数作为参数，负数的话将会从后边计算\n\nstr.slice(1);                       #1往后的全部内容\nstr.slice(1,4);\nstr.slice(1,-1);\n")])])]),s("h2",{attrs:{id:"substring"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#substring"}},[a._v("#")]),a._v(" substring")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("#可以用来截取一个字符串，可以slice()类似\n- 参数: 第一个是开始截取位置的索引（包括开始位置） 第二个是结束位置的索引（不包括结束位置）\n\t#不同的是这个方法不能接受负值作为参数，如果传递了一个负值，则默认使用0\n\t#而且他还自动调整参数的位置，如果第二个参数小于第一个，则自动交换\n\t\nstr.substring(0,1);\n")])])]),s("h2",{attrs:{id:"substr"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#substr"}},[a._v("#")]),a._v(" substr")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("#用来截取字符串, 参数: 第一个是截取开始位置的索引, 第二个是截取的长度\n\nstr.substr(3,2);\n")])])]),s("h2",{attrs:{id:"split"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#split"}},[a._v("#")]),a._v(" split")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('#可以将一个字符串拆分为一个数组\n- 参数: 需要一个字符串作为参数，将会根据该字符串去拆分数组; 如果传递一个空串作为参数，则会将每个字符都拆分为数组中的一个元素\n\nstr.split("d");\nArray.isArray(str.split("d"))\t\t#检查结果是否是数组，和xx instanceof Array应该结果是一样的\n')])])]),s("h2",{attrs:{id:"touppercase"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#touppercase"}},[a._v("#")]),a._v(" toUpperCase")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("#将一个字符串转换为大写并返回\n\n'abc'.toUpperCase()\t\t\t\t\t\t#'ABC'\n")])])]),s("h2",{attrs:{id:"tolowercase"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#tolowercase"}},[a._v("#")]),a._v(" toLowerCase")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("#将一个字符串转换为小写并返回\n\n'ABC'.toLowerCase()\t\t\t\t\t\t#'abc'\n")])])]),s("h2",{attrs:{id:"正则相关方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#正则相关方法"}},[a._v("#")]),a._v(" 正则相关方法")]),a._v(" "),s("h3",{attrs:{id:"split-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#split-2"}},[a._v("#")]),a._v(" split")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("#可以将一个字符串拆分为一个数组;\t这个方法即使不指定全局匹配，也会全都拆分\n\nstr.split(/[A-z]/);\n")])])]),s("h3",{attrs:{id:"search"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#search"}},[a._v("#")]),a._v(" search")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("#可以搜索字符串中是否含有指定内容;\t如果搜索到指定内容，则会返回第一次出现的索引，如果没有搜索到返回-1\n#serach()只会查找第一个，即使设置全局匹配也没用 ！！！\n\nstr.search(/a[bef]c/);\n")])])]),s("h3",{attrs:{id:"match"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#match"}},[a._v("#")]),a._v(" match")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("#从一个字符串中将符合条件的内容提取出来    #match侧重检索出匹配的结果，search侧重是否存在（即索引）\n\n- 默认情况match只会找到第一个符合要求的内容，找到后就停止检索,可以设置正则表达式为全局匹配模式，这样就会匹配到所有的内容 ！！！\n\t可以为一个正则表达式设置多个匹配模式，且顺序无所谓 (/ig之类)\n- match()会将匹配到的内容封装到一个数组中返回，即使只查询到一个结果\n\nstr.match(/[A-z]/ig);\n")])])]),s("h3",{attrs:{id:"replace"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#replace"}},[a._v("#")]),a._v(" replace")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("#可以将字符串中指定内容替换为新的内容（不会影响原字符串！！！）\n\n#'1a2a'.replace('a','@_@')            #默认只替换第一个a\n#str.replace(/[a-z]/gi , \"\");        #加上/g就可以全局替换\n")])])])])}),[],!1,null,null,null);t.default=r.exports}}]);