(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{417:function(t,a,e){"use strict";e.r(a);var r=e(56),n=Object(r.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h2",{attrs:{id:"while循环"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#while循环"}},[t._v("#")]),t._v(" while循环")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("while循环")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("while(条件表达式){\n\t语句...\n}\n\n#var i=0;while(i<5){i++;console.log(i)}\n")])])])]),t._v(" "),e("li",[e("p",[t._v("do...while循环")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("- 语法：\n\tdo{\n\t\t语句...\n\t}while(条件表达式)\n\n\n实际上这两个语句功能类似，不同的是while是先判断后执行，而do...while会先执行后判断\n\ndo...while可以保证循环体至少执行一次，而while不能\n")])])])])]),t._v(" "),e("h2",{attrs:{id:"for循环"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#for循环"}},[t._v("#")]),t._v(" for循环")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('for(var i = 0 ; i < 10 ; i++ ){ xxx }\nfor(var i = 0,sum=0 ; i < 10 ; i++ ){ xxx }             #初始化两个变量\n\nfor循环中的三个部分都可以省略，也可以写在外部\n    var i=0;\n    for(;i<10;){\n        alert("i++");\n    }\n    如果在for循环中不写任何的表达式，只写两个;此时循环是一个死循环会一直执行下去，慎用     \n        #for(;;){}\n        \n\n练习一：for循环求取1到100所有数字的和，sum定义在了for循环的外边，最后依然能取到sum的值，\n    var sum=0;for(){...};console.log(sum)        #sum初始化定义在for的外侧\n    for(i=0,sum=0;i<100;i++){...}    \t\t\t #sum初始化定义在for的内部\n')])])]),e("h3",{attrs:{id:"break和continue"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#break和continue"}},[t._v("#")]),t._v(" break和continue")]),t._v(" "),e("p",[t._v("不能在if语句中使用break，只能在for或switch中使用")]),t._v(" "),e("p",[t._v("break只对离他最近的循环有影响，for循环嵌套的时候，内部的break只能终止内循环")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('label： （相当于定义了一个别名）\n\t可以为循环语句创建一个label，来标识当前的循环,\n\t使用break语句时可以在break后跟着一个label，这样break将会结束指定的循环，而不是最近的\n\t\n\t\n\touter:                        #label:循环语句\n\tfor(var i=0 ; i<5 ; i++){\n\t\tconsole.log("@外层循环"+i)\n\t\tfor(var j=0 ; j<5; j++){\n\t\t\tbreak outer;                               #使用label，循环嵌套时可以直接终止外层循环\n\t\t\tconsole.log("内层循环:"+j);\n\t\t}\n')])])]),e("p",[t._v("continue也是只对离他最近的循环有影响")])])}),[],!1,null,null,null);a.default=n.exports}}]);