(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{414:function(a,t,s){"use strict";s.r(t);var e=s(56),r=Object(e.a)({},(function(){var a=this,t=a.$createElement,s=a._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h2",{attrs:{id:"创建数组"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#创建数组"}},[a._v("#")]),a._v(" 创建数组")]),a._v(" "),s("ul",[s("li",[s("p",[a._v("方式一")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("var arr = new Array();\nvar arr2 = new Array(10,20,30);\narr2 = new Array(10);       #这种表示的是创建长度为10的数组，此时表示的就不是数组的元素是10了\n")])])])]),a._v(" "),s("li",[s("p",[a._v("方式二")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("var arr = [];\nvar arr = [1,2,3,4,5,10];\n")])])])])]),a._v(" "),s("h3",{attrs:{id:"读取-添加元素"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#读取-添加元素"}},[a._v("#")]),a._v(" 读取/添加元素")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('arr[0] = 10;\narr[1] = 33;\narr[arr.length] = 123;                #向数组的末尾位置添加元素\n\narr.hello = "abc";    #这样也能写，但是没有意义了，相当于是添加了一个hello的属性（数组也是一个对象，对象能做的事情他都能做）\n')])])]),s("h3",{attrs:{id:"length"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#length"}},[a._v("#")]),a._v(" length")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("arr.length                #对于连续的数组，使用length可以获取到数组的长度（元素的个数），\n\t#arr[10] = 100;  但是对于非连续的数组，使用length会获取到数组的最大的索引+1；\n\n修改length:\n\t如果修改的length大于原长度，则多出部分会空出来\n\t如果修改的length小于原长度，则多出的元素会被删除，arr.length = 10;\t\t\n")])])]),s("h2",{attrs:{id:"能影响原数组方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#能影响原数组方法"}},[a._v("#")]),a._v(" 能影响原数组方法")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("能影响原数组的方法：push/pop/shift/unshift/splice/sort/reverse\n")])])]),s("h2",{attrs:{id:"循环列表"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#循环列表"}},[a._v("#")]),a._v(" 循环列表")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("aa=[11,22,33,44,55]\n\nfor (var i = 0;i < aa.length;i++ ){console.log(aa[i])}    #需要先定义i=0，循环完成后i的值为6\n")])])]),s("h2",{attrs:{id:"for-in"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#for-in"}},[a._v("#")]),a._v(" for...in")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("for (var i in aa){console.log(i)}        #输出的结果为列表的索引值，输出结果为'4'\n")])])]),s("h2",{attrs:{id:"for-of"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#for-of"}},[a._v("#")]),a._v(" for...of")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("for (var i of aa){console.log(i)}        #输出结果为列表中的值，循环完成后i的值为55\n")])])]),s("h2",{attrs:{id:"判断列表是否包含某值"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#判断列表是否包含某值"}},[a._v("#")]),a._v(" 判断列表是否包含某值")]),a._v(" "),s("ul",[s("li",[s("p",[a._v("includes方法")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("if (aa.includes(22)) { console.log('true') }    #不仅适用于判断list是否包含特定元素，也适用于判断字符串中是否包含特定字符\n")])])])]),a._v(" "),s("li",[s("p",[a._v("indexOf方法")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("if(aa.indexOf(22) !== -1) {console.log('true')}    #不仅适用于判断list是否包含特定元素，也适用于判断字符串中是否包含特定字符\n")])])])]),a._v(" "),s("li",[s("p",[a._v("判读是否包含空时：数组和字符串的区别")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("[11,22,33,44,55].indexOf('')                #数组判断的时候为false，不包含\n'abc'.includes('')            #字符串判断的时候为true，包含\n")])])])])]),a._v(" "),s("h2",{attrs:{id:"push"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#push"}},[a._v("#")]),a._v(" push")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('#向数组的末尾添加一个或多个元素，并返回数组的新的长度\n\narr.push("唐僧","蜘蛛精","白骨精","玉兔精");\n')])])]),s("h2",{attrs:{id:"pop"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#pop"}},[a._v("#")]),a._v(" pop")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("#该方法可以删除数组的最后一个元素,并将被删除的元素作为返回值返回\n\narr.pop();\n")])])]),s("h2",{attrs:{id:"unshift"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#unshift"}},[a._v("#")]),a._v(" unshift")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('#向数组开头添加一个或多个元素，并返回新的数组长度\n\narr.unshift("唐僧");\n')])])]),s("h2",{attrs:{id:"shift"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#shift"}},[a._v("#")]),a._v(" shift")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("#可以删除数组的第一个元素，并将被删除的元素作为返回值返回\n\narr.shift();\n")])])]),s("h2",{attrs:{id:"filter"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#filter"}},[a._v("#")]),a._v(" filter")]),a._v(" "),s("blockquote",[s("p",[a._v("filter过滤不影响原数组，而是返回一个新的数组！！！！！！！")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("alreadyFinishCount() {\n    return this.todolist.filter((item) => item.status == true).length;\n}\n\n#此处可以改为：this.todolist.filter((item) => item.status).length;\n")])])]),s("h2",{attrs:{id:"foreach"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#foreach"}},[a._v("#")]),a._v(" forEach")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("arr.forEach((正在遍历的元素,正在遍历元素的索引,正在遍历的数组)=>{...})\n\narr.forEach(function(value, index, totalObj){\t\t#forEach\n\tconsole.log(value);\n});\n")])])]),s("h2",{attrs:{id:"slice"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#slice"}},[a._v("#")]),a._v(" slice")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("#可以用来从数组提取指定元素; 该方法不会改变原数组，而是将截取到的元素封装到一个新数组中返回\n\narr.slice(1,4);             #包含开始索引元素，不包含结束位置的索引元素\narr.slice(3);               #从3开始的所有元素\narr.slice(1,-2);            #-1 倒数第一个，-2 倒数第二个\n")])])]),s("h2",{attrs:{id:"splice"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#splice"}},[a._v("#")]),a._v(" splice")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('#使用splice()会影响到原数组，会将指定元素从原数组中删除，并将被删除的元素作为返回值返回\n\narr.splice(3,0,"牛魔王","铁扇公主","红孩儿");\n')])])]),s("h2",{attrs:{id:"some"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#some"}},[a._v("#")]),a._v(" some")]),a._v(" "),s("h2",{attrs:{id:"every"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#every"}},[a._v("#")]),a._v(" every")]),a._v(" "),s("h2",{attrs:{id:"map"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#map"}},[a._v("#")]),a._v(" map")]),a._v(" "),s("h2",{attrs:{id:"concat"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#concat"}},[a._v("#")]),a._v(" concat")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('#可以连接两个或多个数组，并将新的数组返回；\t该方法不会对原数组产生影响\n\narr.concat(arr2,arr3,"牛魔王","铁扇公主");\n\n\n#注意：[1,2,3] + [4,5]  结果为：\'1,2,34,5\'\n[...[1,2,3],...[4,5]]\t\t#还可以用这种ES6中的方法\n')])])]),s("h2",{attrs:{id:"join"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#join"}},[a._v("#")]),a._v(" join")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('#该方法可以将数组转换为一个字符串\n#在join()中可以指定一个字符串作为参数，这个字符串将会成为数组中元素的连接符;如果不指定连接符，则默认使用,作为连接符\n\narr.join("@-@")\n')])])]),s("h2",{attrs:{id:"reverse"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#reverse"}},[a._v("#")]),a._v(" reverse")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("#该方法会直接修改原数组\n\narr.reverse();\n")])])]),s("h2",{attrs:{id:"sort"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#sort"}},[a._v("#")]),a._v(" sort")]),a._v(" "),s("blockquote",[s("p",[a._v("会影响原数组")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("升序：aa.sort((a,b)=>a-b)\n降序：aa.sort((a,b)=>b-a)\n")])])]),s("h2",{attrs:{id:"reduce"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#reduce"}},[a._v("#")]),a._v(" reduce")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('const todos = {\n\t{ todo: "奔驰", flag: true },\n\t{ todo: "奥迪", flag: false },\n    { todo: "宝马", flag: true }\n}\ntodos.reduce((pre, todo,index) => pre + (todo.flag ? 1 : 0), 0)\n')])])]),s("h2",{attrs:{id:"类数组-list数组"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#类数组-list数组"}},[a._v("#")]),a._v(" 类数组 => list数组")]),a._v(" "),s("ul",[s("li",[s("p",[a._v("方式一：Array.from()方法")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("let allSpan = document.getElementsByClassName('menuSpan')    #此时allSpan是类list列表\n\t#此时 allSpan.forEach(item=>{}) 此时会报错 allSpan.forEach is not a function\n\nArray.from(allSpan).forEach(element => {...});\t#Array.from(allSpan)转换下就可以了\n")])])])]),a._v(" "),s("li",[s("p",[a._v("方式二： ...[xx]方法")])])])])}),[],!1,null,null,null);t.default=r.exports}}]);