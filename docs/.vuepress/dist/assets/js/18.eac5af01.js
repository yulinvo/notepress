(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{418:function(t,a,e){"use strict";e.r(a);var n=e(56),s=Object(n.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h2",{attrs:{id:"math"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#math"}},[t._v("#")]),t._v(" Math")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("Math.PI 表示的圆周率\n\nMath.abs(-1)\t\t\t#abs()可以用来计算一个数的绝对值\n\nMath.ceil(1.2)\t\t\t\t\t#可以对一个数进行向上取整，小数位只有有值就自动进1\nMath.floor(1.9)\t\t\t\t\t#可以对一个数进行向下取整，小数部分会被舍掉\nMath.round(1.3)\t\t\t\t\t#可以对一个数进行四舍五入取整\n\nMath.random()\t\t\t\t\t#可以用来生成一个0-1之间的随机数\n\nMath.max(10,45,30,100);\t\t\t#max() 可以获取多个数中的最大值\nMath.min(10,45,30,100);\t\t\t#min() 可以获取多个数中的最小值\n\nMath.pow(x,y)\t\t\t\t\t#返回x的y次幂\n\nMath.sqrt()\t\t\t\t\t\t#用于对一个数进行开方运算\n")])])]),e("h2",{attrs:{id:"date"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#date"}},[t._v("#")]),t._v(" Date")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("创建Date对象")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('var d1 = new Date();  \t\t#不指定时间，则会封装为当前代码执行的时间\n\nvar d2 = new Date("2/18/2011 11:10:30");\t\t#时间的字符串格式：月份/日/年 时:分:秒\n')])])])]),t._v(" "),e("li",[e("p",[t._v("常用的方法")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('getDate()            # 获取当前日期对象是几日\n    var date = d2.getDate();\n\n\ngetDay()                #获取当前日期对象是周几\n    - 会返回一个0-6的值; 0 表示周日,1表示周一\n    var day = d2.getDay();\n    \n    \ngetMonth()              #获取当前时间对象的月份\n    - 会返回一个0-11的值;0 表示1月, 1 表示2月, 11 表示12月\n    var month = d2.getMonth();\n\n\ngetFullYear()           #获取当前日期对象的年份\n    var year = d2.getFullYear();\n\n\ngetTime()               #获取当前日期对象的时间戳\n    - 时间戳，指的是从格林威治标准时间的1970年1月1日0时0分0秒, 到当前日期所花费的毫秒数（1秒 = 1000毫秒）\n    - 计算机底层在保存时间时使用都是时间戳\n    var time = new Date("1/1/1970 0:0:0").getTime();\n    \t#这个时间戳不是0，而是一个负值，因为d3设置的时间是北京时间，不是格林威治标准时间，这个时间戳除一下刚好是8个小时\n\n\nDate.now();                 #date对象提供的now()方法获取当前时间的时间戳\n')])])])])]),t._v(" "),e("h2",{attrs:{id:"re正则表达式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#re正则表达式"}},[t._v("#")]),t._v(" re正则表达式")]),t._v(" "),e("h3",{attrs:{id:"正则语法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#正则语法"}},[t._v("#")]),t._v(" 正则语法")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("量词：\n    - 量词只对它前边的一个内容起作用\n    - {n} 正好出现n次\n    - {m,n} 出现m-n次\n    - {m,} m次以上\n    - + 至少一个，相当于{1,}\n    - * 0个或多个，相当于{0,}\n    - ? 0个或1个，相当于{0,1}\n    \n    reg = /(ab){3}/;\n    \n    /^a$/.test('aaa')        #结果为false\n    /^a|a$/.test('aaa')        #结果为true\n\n\n\\w           - 任意字母、数字、_  [A-z0-9_]\n\\W            - 除了字母、数字、_  [^A-z0-9_]        #匹配@#%之类\n\\d            - 任意的数字 [0-9]    \t\t\t\t\t#不能匹配多位數，比如100，需要\\d*\n\\D            - 除了数字 [^0-9]\n\\s            - 空格            \t\t\t\t\t#\\s表示匹配一次空格，等同与 \\s{1}\n\\S            - 除了空格    \t\t\t\t\t\t#纯空格的话会是false\n\\b            - 单词边界(只写一个\\b而不是一对则表示单词的一侧)    \n\t#/\\bchild\\b/.test(str)\n\t#/\\ba/.test('as') 只写一侧（结果为true）\n\\B            - 除了单词边界\n\n\n转义字符：\n    reg = /\\./;                         #\\表示转移字符，是否含有字符'.'\n    reg = /\\\\/;                         #\\表示转移字符，是否含有字符'\\'\n        #console.log(reg.test(\"b.\\\\\"))      #字符串中\\也表示转移，如果只写一个\\，将把后面的”给转义了\n            #字符串中包含一个\\时也要写两个\\，输出的时候只会输出一个\\\n    \n    注意：使用构造函数时，由于它的参数是一个字符串，而\\是字符串中转义字符，如果要使用\\则需要使用\\\\来代替\n        reg = new RegExp(\"\\\\.\");\n        reg = new RegExp(\"\\\\\\\\\");               #匹配‘\\\\’\n\n")])])]),e("h3",{attrs:{id:"创建正则表达式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#创建正则表达式"}},[t._v("#")]),t._v(" 创建正则表达式")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("方式一")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('var reg = new RegExp("正则表达式","匹配模式"); \t\t\t#使用typeof检查正则对象，会返回object\n\t匹配模式：i 忽略大小写;  g 全局匹配模式\n\nvar reg = new RegExp("a","i"); 这个正则表达式可以来检查一个字符串中是否含有a（不管是开头还是在中间、结尾都可以）\n')])])])]),t._v(" "),e("li",[e("p",[t._v("方式二")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("var reg = /a/i;\n\nreg = /a|b|c/;    #创建一个正则表达式，检查一个字符串中是否有a或b\nreg = /[A-z]/;    #[]里的内容也是或的关系；[A-z] 任意字母，包含大小写字母\nreg = /a[bde]c/;    #//检查一个字符串中是否含有 abc 或 adc 或 aec\nreg = /[^ab]/;    #[^ ] 除了              ！！！！！\n    #reg.test('abc');       结果是true                      #P86 12:50\n")])])])])]),t._v(" "),e("h3",{attrs:{id:"test"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#test"}},[t._v("#")]),t._v(" test")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('#使用这个方法可以用来检查一个字符串是否符合正则表达式的规则，如果符合则返回true，否则返回false\nreg.test("Acadfadc")\n')])])]),e("h3",{attrs:{id:"exec"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#exec"}},[t._v("#")]),t._v(" exec")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code")])]),e("h3",{attrs:{id:"练习"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#练习"}},[t._v("#")]),t._v(" 练习")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("练习一：接收一个用户的输入，去除掉字符串中的前后的空格")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('#易错点：两边的空格去除掉，中间的空格不除去\n    #str.replace(/\\s/g , "");\n    #str.replace(/^\\s*|\\s*$/g,"");\n')])])])])])])}),[],!1,null,null,null);a.default=s.exports}}]);